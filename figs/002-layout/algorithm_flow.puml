@startuml algorithm_flow
title Commit 02: Lane Allocation Algorithm (No Compression)

start

:Initialize RowBuilder;
note right
  max_lanes = terminal_width / 2
  active_branches = {}
  next_lane = 0
end note

:Topological sort commits;
note left: DFS from leaves to roots

partition "For each commit" {
  :Get commit from sorted list;

  :Assign primary lane;
  if (Commit in active_branches?) then (yes)
    :Use existing lane;
  else (no)
    :Assign next_lane;
    :Increment next_lane;
    :Add to active_branches;
  endif

  :Initialize lanes array;
  note right: Vec<Lane::Empty>

  :Set primary lane type;
  if (Is merge commit?) then (yes)
    :Lane::Merge(parent_lanes);
    partition "For each parent" {
      :Assign parent lane;
      :Add to merge targets;
    }
  elseif (Has single parent?) then (yes)
    if (Parent lane != primary lane?) then (yes)
      :Lane::BranchStart;
    else (no)
      :Lane::Commit;
    endif
  else (no parents)
    :Lane::Commit;
  endif

  :Mark passing lanes;
  partition "For each active branch" {
    if (Not primary lane?) then (yes)
      :Set Lane::Pass;
    endif
  }

  :Check for branch end;
  if (No children?) then (yes)
    :Set Lane::End;
    :Remove from active_branches;
  endif

  :Create Row object;
  :Add to rows list;
}

:Return rows;

stop

@enduml